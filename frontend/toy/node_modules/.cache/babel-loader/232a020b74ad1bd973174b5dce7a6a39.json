{"ast":null,"code":"import { API_BASE_URL } from \"../app-config\";\nexport function call(api, method, request) {\n  console.log(\"api : \", api);\n  console.log(\"method : \", method);\n  console.log(\"request : \", request);\n  let options = {\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  if (request) {\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then(response => response.json().then(json => {\n    if (!response.ok) {\n      return Promise.reject(json);\n    }\n\n    return json;\n  }));\n}","map":{"version":3,"sources":["/Users/edward/Documents/bamcoding/toy/frontend/toy/src/service/ApiService.js"],"names":["API_BASE_URL","call","api","method","request","console","log","options","headers","Headers","url","body","JSON","stringify","fetch","then","response","json","ok","Promise","reject"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AAEA,OAAO,SAASC,IAAT,CAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBJ,GAArB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,MAAzB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,OAA1B;AAEA,MAAIG,OAAO,GAAG;AACVC,IAAAA,OAAO,EAAG,IAAIC,OAAJ,CAAY;AAClB,sBAAiB;AADC,KAAZ,CADA;AAIVC,IAAAA,GAAG,EAAGV,YAAY,GAAGE,GAJX;AAKVC,IAAAA,MAAM,EAAEA;AALE,GAAd;;AAOA,MAAGC,OAAH,EAAY;AACRG,IAAAA,OAAO,CAACI,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeT,OAAf,CAAf;AACH;;AACD,SAAOU,KAAK,CAACP,OAAO,CAACG,GAAT,EAAcH,OAAd,CAAL,CAA4BQ,IAA5B,CAAkCC,QAAD,IACpCA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBE,IAAD,IAAU;AAC3B,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AACd,aAAOC,OAAO,CAACC,MAAR,CAAeH,IAAf,CAAP;AACH;;AACD,WAAOA,IAAP;AACH,GALD,CADG,CAAP;AAQH","sourcesContent":["import { API_BASE_URL } from \"../app-config\";\n\nexport function call(api, method, request) {\n    console.log(\"api : \",api);\n    console.log(\"method : \", method);\n    console.log(\"request : \", request);\n\n    let options = {\n        headers : new Headers({\n            \"Content-Type\" : \"application/json\",\n        }),\n        url : API_BASE_URL + api,\n        method: method,\n    };\n    if(request) {\n        options.body = JSON.stringify(request);\n    }\n    return fetch(options.url, options).then((response) =>\n        response.json().then((json) => {\n            if (!response.ok) {\n                return Promise.reject(json);\n            }\n            return json;\n        })\n    );\n}"]},"metadata":{},"sourceType":"module"}