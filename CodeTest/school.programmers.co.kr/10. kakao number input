0. 입력한 숫자의 위치를 리턴
1. 특정 좌표는 무조건 L 리턴
2. 특정 좌표는 무조건 R 리턴
3. 입력된 숫자와 왼손엄지의 거리 계산
4. 입력된 숫자와 오른손 엄지의 거리 계산
5. [3,4]의 값을 비교해서 가까운 손을 리턴
6. 손 위치를 저장
7. 반복



function solution(numbers, hand) {
    let tMap = {
        '1' : [0,3], '2' : [1,3], '3' : [0,3],
        '4' : [0,2], '5' : [1,2], '6' : [0,2],
        '7' : [0,1], '8' : [1,1], '9' : [0,1],
        '*' : [0,0], '0' : [1,0], '#' : [0,0],
    }
    
    //0. 손위치 초기화
    let left = tMap['*'];
    let right = tMap['#'];
    
    let result = '';
    
    //0. 입력한 숫자의 위치를 리턴
    for(let i=0;i<numbers;i++){
        let cp = tMap[i+''];
        
        // 왼손과의 거리
        lDiff = (cp[0]-left[0])+(cp[1]-left[1]);
        // 오른손과의 거리
        rDiff = (cp[0]-right[0])+(cp[1]-right[1]);
        
        if(lDiff<rDiff) {
            result+='L';
        } else if (lDiff<rDiff) {
            result+='R';
        } else {
            result+=(hand=='left'?'L':'R'); 
        }
        
        
    }
    
    
    
    //1. 특정 좌표는 무조건 L 리턴
    //2. 특정 좌표는 무조건 R 리턴

    
    
    
    
    
    
    let padArr = makePad();
    let
    
    var answer = '';
    return answer;
}

function makePad() {
    let no = 1;
    let y = 3;
    let x = 3;
    
    let bottomArr = ['*','0','#'];
    let yArr = [];
    for(let i=0;i<y;i++){
        let xArr = new Array();
        for(let j=0;j<x;j++){
            xArr.push(no+'');
            no++;
        }
        yArr.push(xArr);
    }
    yArr.push(bottomArr);
    yArr.forEach((y)=>console.log(y));   
    return yArr;
}
